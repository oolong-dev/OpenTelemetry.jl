# Autogenerated using ProtoBuf.jl v1.0.9 on 2023-03-01T12:24:55.791
# original file: /home/tj/workspace/git/OpenTelemetry.jl/src/proto/dev/opentelemetry-proto-0.19.0/opentelemetry/proto/resource/v1/resource.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export Resource

struct Resource
    attributes::Vector{opentelemetry.proto.common.v1.KeyValue}
    dropped_attributes_count::UInt32
end
PB.default_values(::Type{Resource}) = (;attributes = Vector{opentelemetry.proto.common.v1.KeyValue}(), dropped_attributes_count = zero(UInt32))
PB.field_numbers(::Type{Resource}) = (;attributes = 1, dropped_attributes_count = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:Resource})
    attributes = PB.BufferedVector{opentelemetry.proto.common.v1.KeyValue}()
    dropped_attributes_count = zero(UInt32)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, attributes)
        elseif field_number == 2
            dropped_attributes_count = PB.decode(d, UInt32)
        else
            PB.skip(d, wire_type)
        end
    end
    return Resource(attributes[], dropped_attributes_count)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::Resource)
    initpos = position(e.io)
    !isempty(x.attributes) && PB.encode(e, 1, x.attributes)
    x.dropped_attributes_count != zero(UInt32) && PB.encode(e, 2, x.dropped_attributes_count)
    return position(e.io) - initpos
end
function PB._encoded_size(x::Resource)
    encoded_size = 0
    !isempty(x.attributes) && (encoded_size += PB._encoded_size(x.attributes, 1))
    x.dropped_attributes_count != zero(UInt32) && (encoded_size += PB._encoded_size(x.dropped_attributes_count, 2))
    return encoded_size
end
