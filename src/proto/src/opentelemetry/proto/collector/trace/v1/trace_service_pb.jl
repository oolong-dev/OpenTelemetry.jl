# Autogenerated using ProtoBuf.jl v1.0.9 on 2023-03-01T12:14:45.357
# original file: /home/tj/workspace/git/OpenTelemetry.jl/src/proto/dev/opentelemetry-proto-0.19.0/opentelemetry/proto/collector/trace/v1/trace_service.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export ExportTracePartialSuccess, ExportTraceServiceRequest, ExportTraceServiceResponse
export TraceService

struct ExportTracePartialSuccess
    rejected_spans::Int64
    error_message::String
end
PB.default_values(::Type{ExportTracePartialSuccess}) = (;rejected_spans = zero(Int64), error_message = "")
PB.field_numbers(::Type{ExportTracePartialSuccess}) = (;rejected_spans = 1, error_message = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:ExportTracePartialSuccess})
    rejected_spans = zero(Int64)
    error_message = ""
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            rejected_spans = PB.decode(d, Int64)
        elseif field_number == 2
            error_message = PB.decode(d, String)
        else
            PB.skip(d, wire_type)
        end
    end
    return ExportTracePartialSuccess(rejected_spans, error_message)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::ExportTracePartialSuccess)
    initpos = position(e.io)
    x.rejected_spans != zero(Int64) && PB.encode(e, 1, x.rejected_spans)
    !isempty(x.error_message) && PB.encode(e, 2, x.error_message)
    return position(e.io) - initpos
end
function PB._encoded_size(x::ExportTracePartialSuccess)
    encoded_size = 0
    x.rejected_spans != zero(Int64) && (encoded_size += PB._encoded_size(x.rejected_spans, 1))
    !isempty(x.error_message) && (encoded_size += PB._encoded_size(x.error_message, 2))
    return encoded_size
end

struct ExportTraceServiceRequest
    resource_spans::Vector{opentelemetry.proto.trace.v1.ResourceSpans}
end
PB.default_values(::Type{ExportTraceServiceRequest}) = (;resource_spans = Vector{opentelemetry.proto.trace.v1.ResourceSpans}())
PB.field_numbers(::Type{ExportTraceServiceRequest}) = (;resource_spans = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:ExportTraceServiceRequest})
    resource_spans = PB.BufferedVector{opentelemetry.proto.trace.v1.ResourceSpans}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, resource_spans)
        else
            PB.skip(d, wire_type)
        end
    end
    return ExportTraceServiceRequest(resource_spans[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::ExportTraceServiceRequest)
    initpos = position(e.io)
    !isempty(x.resource_spans) && PB.encode(e, 1, x.resource_spans)
    return position(e.io) - initpos
end
function PB._encoded_size(x::ExportTraceServiceRequest)
    encoded_size = 0
    !isempty(x.resource_spans) && (encoded_size += PB._encoded_size(x.resource_spans, 1))
    return encoded_size
end

struct ExportTraceServiceResponse
    partial_success::Union{Nothing,ExportTracePartialSuccess}
end
PB.default_values(::Type{ExportTraceServiceResponse}) = (;partial_success = nothing)
PB.field_numbers(::Type{ExportTraceServiceResponse}) = (;partial_success = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:ExportTraceServiceResponse})
    partial_success = Ref{Union{Nothing,ExportTracePartialSuccess}}(nothing)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, partial_success)
        else
            PB.skip(d, wire_type)
        end
    end
    return ExportTraceServiceResponse(partial_success[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::ExportTraceServiceResponse)
    initpos = position(e.io)
    !isnothing(x.partial_success) && PB.encode(e, 1, x.partial_success)
    return position(e.io) - initpos
end
function PB._encoded_size(x::ExportTraceServiceResponse)
    encoded_size = 0
    !isnothing(x.partial_success) && (encoded_size += PB._encoded_size(x.partial_success, 1))
    return encoded_size
end

# TODO: SERVICE
#    TraceService
