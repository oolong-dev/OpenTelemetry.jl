var documenterSearchIndex = {"docs":
[{"location":"tutorials/View_Traces_in_Jaeger/#View-Traces-in-Jaeger","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"","category":"section"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"In recent Jaeger versions, OTLP is supported natively. This means we can send traces to it directly without OpenTelemetry Collector in the middle.","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"Let's review the example provided in README first.","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"using OpenTelemetry\nusing Term # optional, for better display","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"global_tracer_provider(TracerProvider());","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"Here we set a TracerProvider as the global_tracer_provider. One argument we omitted when constructing TracerProvider is the span_processor. Its default value is SimpleSpanProcessor(ConsoleExporter()). By default, it will redirect all the spans to console.","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"with_span(\"Hello, World!\") do\n    with_span(\"from\") do\n        @info \"OpenTelemetry.jl!\"\n    end\nend","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"In the above code, two spans are created. As you can see, the span context of these two spans are correlated. The trace_id and span_id in the OpenTelemetry.jl! log record is also associated with the inner span of from.","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/#Export-Spans-to-Jaeger","page":"View Traces in Jaeger","title":"Export Spans to Jaeger","text":"","category":"section"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"Let's setup the Jaeger first:","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"cd docs/src/tutorials/View_Traces_in_Jaeger\ndocker compose up","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"Then we replace the original ConsoleExporter with OtlpHttpTracesExporter.","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"global_tracer_provider(TracerProvider(;span_processor=SimpleSpanProcessor(OtlpHttpTracesExporter())))\n\nwith_span(\"Hello, World!\") do\n    with_span(\"from\") do\n        @info \"OpenTelemetry.jl!\"\n    end\nend","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"Now open the Jaeger web portal at http://localhost:16686/. You should find a trace with the name of unknown_service:julia: Hello, World! by filtering the service. After clicking the Find Traces button, you should see the detailed spans like the the screenshot below.","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"(Image: )","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/#Reduce-the-Time-Cost-with-BatchSpanProcessor","page":"View Traces in Jaeger","title":"Reduce the Time Cost with BatchSpanProcessor","text":"","category":"section"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"Note that with SimpleSpanProcessor, we're actually sending spans to the Jaeger immediately at the end of each span. To reduce the overall time cost, we can replace it with BatchSpanProcessor.","category":"page"},{"location":"tutorials/View_Traces_in_Jaeger/","page":"View Traces in Jaeger","title":"View Traces in Jaeger","text":"global_tracer_provider(TracerProvider(;span_processor=BatchSpanProcessor(OtlpHttpTracesExporter())))\n\nwith_span(\"Hello, World!\") do\n    with_span(\"from\") do\n        @info \"OpenTelemetry.jl!\"\n    end\nend","category":"page"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"","category":"section"},{"location":"OpenTelemetrySDK/#Exporters","page":"OpenTelemetrySDK","title":"Exporters","text":"","category":"section"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"Two common exporters are provided to for debugging:","category":"page"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"Modules = [OpenTelemetrySDK]\nPages = [\"exporter.jl\"]\nPrivate = false","category":"page"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.ConsoleExporter","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.ConsoleExporter","text":"ConsoleExporter(;io=stdout)\n\nPrint an AbstractSpan or Metric into io.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.InMemoryExporter","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.InMemoryExporter","text":"InMemoryExporter(;pool=[], is_closed=Ref(false))\n\nSimply store all export!ed elements into the pool.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#Tracer","page":"OpenTelemetrySDK","title":"Tracer","text":"","category":"section"},{"location":"OpenTelemetrySDK/#TracerProvider","page":"OpenTelemetrySDK","title":"TracerProvider","text":"","category":"section"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"In SDK, TracerProvider and Span are provided to replace the dummy ones in API. Span is not exported since we mainly use with_span to create new spans.","category":"page"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"Modules = [OpenTelemetrySDK]\nPages = [\"trace_provider.jl\"]\nPrivate = false","category":"page"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.TracerProvider","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.TracerProvider","text":"TracerProvider(;kw...)\n\nKeyword Arguments\n\nsampler::AbstractSampler=DEFAULT_ON\nresource=Resource()\nspan_processor::AbstractSpanProcessor=SimpleSpanProcessor(ConsoleExporter)\nid_generator::AbstractIdGenerator=RandomIdGenerator()\nlimit_info=LimitInfo()\n\nThe following extra methods are provided beyond those defined in AbstractTracerProvider:\n\nflush(p::TracerProvider)\nclose(p::TracerProvider)\nBase.push!(p::TracerProvider, sp::AbstractSpanProcessor)\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#ID-Generators","page":"OpenTelemetrySDK","title":"ID Generators","text":"","category":"section"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"Modules = [OpenTelemetrySDK]\nPages = [\"id_generator.jl\"]\nPrivate = false","category":"page"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.RandomIdGenerator","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.RandomIdGenerator","text":"RandomIdGenerator(rng=Random.GLOBAL_RNG)\n\nUse the rng to generate a random trace id or span id.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#Samplers","page":"OpenTelemetrySDK","title":"Samplers","text":"","category":"section"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"Modules = [OpenTelemetrySDK]\nPages = [\"sampling.jl\"]\nPrivate = false","category":"page"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.ALWAYS_OFF","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.ALWAYS_OFF","text":"Always drop the span.\n\n\n\n\n\n","category":"constant"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.ALWAYS_ON","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.ALWAYS_ON","text":"Always sample the span.\n\n\n\n\n\n","category":"constant"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.DEFAULT_OFF","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.DEFAULT_OFF","text":"Sampler that respects its parent span's sampling decision, but otherwise never samples.\n\n\n\n\n\n","category":"constant"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.DEFAULT_ON","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.DEFAULT_ON","text":"Sampler that respects its parent span's sampling decision, but otherwise always samples.\n\n\n\n\n\n","category":"constant"},{"location":"OpenTelemetrySDK/#Span-Processors","page":"OpenTelemetrySDK","title":"Span Processors","text":"","category":"section"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"Modules = [OpenTelemetrySDK]\nPages = [\"span_processor.jl\"]\nPrivate = false","category":"page"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.BatchSpanProcessor","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.BatchSpanProcessor","text":"BatchSpanProcessor(exporter;kw...)\n\nKeyword arguments\n\nmax_queue_size\nscheduled_delay_millis\nexport_timeout_millis\nmax_export_batch_size\n\nThe default values of above keyword arugments are read from corresponding environment variables.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.CompositSpanProcessor","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.CompositSpanProcessor","text":"CompositSpanProcessor(processors...)\n\nA wrapper of different concrete span processors. Users can also push! new span processors into it after construction. See also SimpleSpanProcessor.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.SimpleSpanProcessor","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.SimpleSpanProcessor","text":"SimpleSpanProcessor(exporter)\n\nExport each span immediately when on_end! is called on this processor.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#Metric","page":"OpenTelemetrySDK","title":"Metric","text":"","category":"section"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"The current implementation of metrics in SDK is mainly inspired by the dotnet sdk.","category":"page"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"┌──────────────────────────────────────────┐\n│MeterProvider                             │\n│                                          │\n│  meters                                  │\n│  views                                   │\n│                                          │\n│  instrument_associated_metric_names      │\n│    instrument =>  Set{metric_name}       │\n│                                          │\n│  metrics                                 │\n│    name => metric                        │\n│    ┌───────────────────────────────────┐ │\n│    │Metric                             │ │\n│    │                                   │ │\n│    │  name                             │ │\n│    │  description                      │ │\n│    │  criteria                         │ │\n│    │  aggregation                      │ │\n│    │    ┌──────────────────────────┐   │ │\n│    │    │AggregationStore          │   │ │\n│    │    │                          │   │ │\n│    │    │  attributes => data_point│   │ │\n│    │    │   ┌─────────────────┐    │   │ │\n│    │    │   │AbstractDataPoint│    │   │ │\n│    │    │   │                 │    │   │ │\n│    │    │   │  value          │    │   │ │\n│    │    │   │  start_time     │    │   │ │\n│    │    │   │  end_time       │    │   │ │\n│    │    │   │  exemplars      │    │   │ │\n│    │    │   │ ┌────────────┐  │    │   │ │\n│    │    │   │ │Exemplar    │  │    │   │ │\n│    │    │   │ │            │  │    │   │ │\n│    │    │   │ │ value      │  │    │   │ │\n│    │    │   │ │ trace_id   │  │    │   │ │\n│    │    │   │ │ span_id    │  │    │   │ │\n│    │    │   │ └────────────┘  │    │   │ │\n│    │    │   │                 │    │   │ │\n│    │    │   └─────────────────┘    │   │ │\n│    │    │                          │   │ │\n│    │    └──────────────────────────┘   │ │\n│    │                                   │ │\n│    └───────────────────────────────────┘ │\n│                                          │\n└──────────────────────────────────────────┘","category":"page"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"A View specifies which instruments are grouped together through Criteria. For each view, a Metric is created to store the Measurements. Each metric may have many different dimensions configured by BoundedAttributes in a Measurement. For each dimension, we may also collect those Exemplars in the mean while.","category":"page"},{"location":"OpenTelemetrySDK/#Design-decisions","page":"OpenTelemetrySDK","title":"Design decisions","text":"","category":"section"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"For each registered instrument, we have stored the associated metrics configured by views into the instrument_associated_metric_names field. So that for each pair of instrument => measurement, we can quickly determine which metrics to update.\nTo make sure that measurements of the same attribute key-values but with different order can be updated in the same dimension in the AggregationStore, a design from opentelemetry-dotnet#2374 is borrowed here.","category":"page"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"Modules = [OpenTelemetrySDK]\nPages = [\"aggregation.jl\", \"datapoint_atomic.jl\", \"datapoint_lock.jl\", \"meter_provider.jl\", \"meter_reader.jl\", \"view.jl\"]\nPrivate = false","category":"page"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.DROP","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.DROP","text":"All measurement will be dropped.\n\n\n\n\n\n","category":"constant"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.Exemplar","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.Exemplar","text":"Exemplar(;kw...)\n\nExemplars are example data points for aggregated data. Read the specification to understand its relation to trace and metric.\n\nKeyword arguments:\n\nvalue\ntime_unix_nano\nfiltered_attributes, extra attributes of a Measurement that are not included in a Metric's :attribute_keys field.\ntrace_id, the trace_id in the span context when the measurement happens.\nspan_id, the span_id in the span context when the measurement happens.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.HistogramAgg","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.HistogramAgg","text":"HistogramAgg(args...)\n\nArguments:\n\nboundaries::NTuple{M, Float64} where M, the boundaries to calculate histogram buckets. Note that -Inf and Inf shouldn't be included.\nis_record_min\nis_record_max\nagg_store\nexemplar_reservoir_factory, when set to nothing, no exemplar will be stored.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.HistogramAgg-Union{Tuple{}, Tuple{T}} where T","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.HistogramAgg","text":"HistogramAgg{T}(;boundaries = DEFAULT_HISTOGRAM_BOUNDARIES, is_record_min = true, is_record_max = true)\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.LastValueAgg","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.LastValueAgg","text":"LastValueAgg(agg_store::AggregationStore, exemplar_reservoir_factory)\n\nWhen exemplar_reservoir_factory set to nothing, no exemplar will be stored.\n\nSee more details in the specification.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.LastValueAgg-Union{Tuple{}, Tuple{T}} where T","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.LastValueAgg","text":"LastValueAgg{T}()\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.SumAgg","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.SumAgg","text":"SumAgg(agg_store::AggregationStore, exemplar_reservoir_factory)\n\nWhen exemplar_reservoir_factory set to nothing, no exemplar will be stored. See more details in the specification.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.SumAgg-Union{Tuple{Any}, Tuple{T}} where T","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.SumAgg","text":"SumAgg{T}()\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.MeterProvider-Tuple{}","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.MeterProvider","text":"MeterProvider(;resource = Resource(), views = View[], max_metrics = nothing)\n\nIf views is empty, a default one (View(;instrument_name=\"*\")) will be added to enable all metrics.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.metrics-Tuple{}","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.metrics","text":"metrics([global_meter_provider()])\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.View","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.View","text":"View(name=nothing;kwargs...)\n\nThe name support wildcard.\n\nSee more details in the specification.\n\nKeyword arguments\n\ndescription = nothing,\nattribute_keys = nothing,\nextra_dimensions = BoundedAttributes(),\naggregation = nothing,\ninstrument_name = nothing,\ninstrument_type = nothing,\nmeter_name = nothing,\nmeter_version = nothing,\nmeter_schema_url = nothing,\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#Misc","page":"OpenTelemetrySDK","title":"Misc","text":"","category":"section"},{"location":"OpenTelemetrySDK/","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK","text":"Modules = [OpenTelemetrySDK]","category":"page"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.AbstractExporter","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.AbstractExporter","text":"An AbstractExporter is to export a collection of AbstractSpans and (or) Metrics. Each method should have the following interfaces implemented:\n\nflush(::AbstractExporter)\nclose(::AbstractExporter)\nexport!(::AbstractExporter, collection)\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.AbstractIdGenerator","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.AbstractIdGenerator","text":"Customized id generators must implement the following two methods:\n\ngenerate_span_id(::AbstractIdGenerator)\ngenerate_trace_id(::AbstractIdGenerator)\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.AbstractMetricReader","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.AbstractMetricReader","text":"All metric readers should implement close(::AbstractMetricReader) and (r::AbstractMetricReader)().\n\nBuiltin readers:\n\nCompositMetricReader\nMetricReader\nPeriodicMetricReader\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.AbstractSampler","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.AbstractSampler","text":"A sampler controls whether to drop a span or not when creating new spans in a certain context. Each sampler should have the should_sample method implemented.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.AbstractSpanProcessor","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.AbstractSpanProcessor","text":"Each span processor must implement the following methods:\n\non_start!(span_processor::AbstractSpanProcessor, span::AbstractSpan)\non_end!(span_processor::AbstractSpanProcessor, span::AbstractSpan)\nclose(span_processor::AbstractSpanProcessor)\nflush(span_processor::AbstractSpanProcessor)\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.AggregationStore-Union{Tuple{}, Tuple{D}} where D<:OpenTelemetrySDK.DataPoint","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.AggregationStore","text":"AggregationStore{D}(max_points=nothing) where D<:DataPoint\n\nThe AggregationStore holds all the aggregated datapoints in a Metric.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.Limited","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.Limited","text":"Limited(container; limit=32)\n\nCreate a container wrapper with limited elements.\n\nThe following methods from Base are defined on Limited which are then forwarded to the inner container. Feel free to create a PR if you find any method you need is missing:\n\nBase.getindex\nBase.setindex!\nBase.iterate\nBase.length\nBase.haskey\nBase.push!. Only defined on containers of AbstractVector.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.MetricReader","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.MetricReader","text":"MetricReader([global_meter_provider()], [ConsoleExporter()])\n\nNote that all metrics will be read on initialization.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.MetricReader-Tuple{}","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.MetricReader","text":"(r::MetricReader)()\n\nFor async instruments in r, their callbacks will be executed first before reading all the metrics.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.OtelBatchLogger-Tuple{Any}","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.OtelBatchLogger","text":"OtelBatchLogger(exporter;kw...)\n\nOtelBatchLogger is a Sink (see LoggingExtras.jl to understand the concept).  Note that it will create a OtelLogTransformer on construction and apply it automatically on each log message.\n\nKeyword arguments\n\nmax_queue_size=nothing\nscheduled_delay_millis = nothing\nexport_timeout_millis = nothing\nmax_export_batch_size = nothing\nresource = Resource()\ninstrumentation_scope = InstrumentationScope()\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.PeriodicMetricReader","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.PeriodicMetricReader","text":"PeriodicMetricReader(reader; export_interval_seconds = 60, export_timeout_seconds = 30)\n\nPeriodically call the reader in the background.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.PeriodicMetricReader-Tuple{}","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.PeriodicMetricReader","text":"For PeriodicMetricReader, there's no need to call this method since the read operation will be done periodically in the background.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#Base.close-Tuple{TracerProvider}","page":"OpenTelemetrySDK","title":"Base.close","text":"close(p::TracerProvider)\n\nShut down inner span processors and then mark itself as shut down.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#Base.flush-Tuple{TracerProvider}","page":"OpenTelemetrySDK","title":"Base.flush","text":"flush(p::TracerProvider)\n\nShorthand to force flush inner span processors\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#Base.push!-Tuple{OpenTelemetrySDK.AbstractSpanProcessor}","page":"OpenTelemetrySDK","title":"Base.push!","text":"Base.push!([p::TracerProvider], sp::AbstractSpanProcessor)\n\nAdd an extra span processor sp into the TracerProvider p.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.on_end!-Tuple{SimpleSpanProcessor, Any}","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.on_end!","text":"on_end!(ssp::SimpleSpanProcessor, span)\n\nThe span is exported immediately if it is sampled.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.on_start!-Tuple{SimpleSpanProcessor, Any}","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.on_start!","text":"on_start!(ssp::SimpleSpanProcessor, span)\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetrySDK/#OpenTelemetrySDK.should_sample","page":"OpenTelemetrySDK","title":"OpenTelemetrySDK.should_sample","text":"should_sample(s::AbstractSampler, args...)\n\nArguments\n\nparent_context::Context,\ntrace_id::TraceIdType,\nname::String, the span name\nkind::SpanKind,\nattributes, StaticBoundedAttributes or DynamicAttrs\nlinks, vector of Link\ntrace_state::TraceState,\n\n\n\n\n\n","category":"function"},{"location":"OpenTelemetryInstrumentationDownloads/#OpenTelemetryInstrumentationDownloads","page":"OpenTelemetryInstrumentationDownloads","title":"OpenTelemetryInstrumentationDownloads","text":"","category":"section"},{"location":"OpenTelemetryInstrumentationDownloads/","page":"OpenTelemetryInstrumentationDownloads","title":"OpenTelemetryInstrumentationDownloads","text":"Modules = [OpenTelemetryInstrumentationDownloads]","category":"page"},{"location":"tips/#Tips-for-Developers","page":"Tips for Developers","title":"Tips for Developers","text":"","category":"section"},{"location":"tips/#Instrument-a-Package","page":"Tips for Developers","title":"Instrument a Package","text":"","category":"section"},{"location":"tips/","page":"Tips for Developers","title":"Tips for Developers","text":"If you have write permission to the package, you can add the dependency of OpenTelemetryAPI and modify the code as you wish. Otherwise, you need to write an independent instrumentation package. Here are some general conventions.","category":"page"},{"location":"tips/","page":"Tips for Developers","title":"Tips for Developers","text":"Each instrumentation package should implement the init(;tracer_provider=global_tracer_provider(), meter_provider=global_meter_provider()) function. Note that this function shouldn't be exported to avoid confliction. In the module __init__() function, call init() to instrument the target library instantly.\nThe name of Meter should have at least have the module and its parent modules' names as the prefix. Usually people use . to connect different parts.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/#View-Metrics-in-Prometheus-with-OpenTelemetry-Collector","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"","category":"section"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"In the previous tutorial, we learned how to view metrics in Prometheus by initializing a PrometheusExporter. Everything seems to work perfectly as expected, then why bother to use OpenTelemetry collector here? Quoted from the official doc:","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"\"The OpenTelemetry Collector offers a vendor-agnostic implementation of how to receive, process and export telemetry data. It removes the need to run, operate, and maintain multiple agents/collectors.\"","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"It provides us a nice way to utilize many different APMs. And we'll see many examples in the following tutorials. Here we'll focus on Prometheus only. First, we'll learn how to use Prometheus to view metrics through OpenTelemetry collector. Then we'll explore some advanced metrics related features provided by OpenTelemetry.jl.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/#The-Relationship-between-OpenTelemetry.jl,-OpenTelemetry-Collector-and-Prometheus","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"The Relationship between OpenTelemetry.jl, OpenTelemetry Collector and Prometheus","text":"","category":"section"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"Let's take a look at a figure from the official OpenTelemetry website first.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"(Image: )","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"What OpenTelemetry.jl provides is a collection of OTel API, OTel SDK, and OTel Instruments in Julia, which lies in the top left corner in the above figure. Observed signals are first sent to OTel Collector, then they are forwarded to many different kinds of receivers. In this tutorial, we are most interested in viewing metrics in Prometheus.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"So in short, we want to send metrics in the OTLP format to a OTel Collector, and then view them in Prometheus.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"┌──────────────────┐  OTLP  ┌────────────────┐   ┌────────────┐\n| OpenTelemetry.jl |------->| OTel Collector |-->| Prometheus |\n└──────────────────┘        └────────────────┘   └────────────┘","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"This time we setup the Prometheus and OTel Collector first.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"cd docs/src/tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector\ndocker compose up","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"Then open the Julia REPL as usual and add some metrics like what we did in the previous tutorial.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"using OpenTelemetry\n\nglobal_meter_provider(MeterProvider());\n\nm = Meter(\"demo_metrics\");\nc = Counter{UInt}(\"fruit_counter\", m)\nc(2; name = \"apple\", color = \"green\")","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"Instead of using the default ConsoleExporter, this time we'll use the OtlpHttpMetricsExporter.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"r = MetricReader(OtlpHttpMetricsExporter())","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"Then head to the Prometheus portal at http://localhost:9090 and select the fruit_counter metric to view the number of fruits. Try adding more different fruits to see how they are displayed on the portal.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/#Beyond-Counter","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"Beyond Counter","text":"","category":"section"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"Counter is the most frequently used metric. Beyond that, many other instruments are also provided. If you try to set a negative value to the counter we created above, an ArgumentError will be thrown. That's because a Counter can only accept non-negative values. You can use the UpDownCounter instead if you want.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"b = UpDownCounter{Float64}(\"balance\", m)\nb(1.8)\nb(-2)\nr()  # upload measurements\n\nb(3.3)\nr()  # upload measurements","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"If you want to measure the latest value of some metrics instead of the cumulative value. Then the ObservableGauge is the best suitable instrument.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"g = ObservableGauge{Float64}(\"temperature\", m) do\n    rand() * 30 - 10\nend\n\nfor _ in 1:10\n    r()\n    sleep(3)\nend","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus_through_Open_Telemetry_Collector/","page":"View Metrics in Prometheus with OpenTelemetry Collector","title":"View Metrics in Prometheus with OpenTelemetry Collector","text":"You're encouraged to try some other instruments listed under Instruments.","category":"page"},{"location":"OpenTelemetryInstrumentationGenie/#OpenTelemetryInstrumentationGenie","page":"OpenTelemetryInstrumentationGenie","title":"OpenTelemetryInstrumentationGenie","text":"","category":"section"},{"location":"OpenTelemetryInstrumentationGenie/","page":"OpenTelemetryInstrumentationGenie","title":"OpenTelemetryInstrumentationGenie","text":"Modules = [OpenTelemetryInstrumentationGenie]","category":"page"},{"location":"OpenTelemetryInstrumentationHTTP/#OpenTelemetryInstrumentationHTTP","page":"OpenTelemetryInstrumentationHTTP","title":"OpenTelemetryInstrumentationHTTP","text":"","category":"section"},{"location":"OpenTelemetryInstrumentationHTTP/","page":"OpenTelemetryInstrumentationHTTP","title":"OpenTelemetryInstrumentationHTTP","text":"Modules = [OpenTelemetryInstrumentationHTTP]","category":"page"},{"location":"OpenTelemetryProto/#OpenTelemetryProto","page":"OpenTelemetryProto","title":"OpenTelemetryProto","text":"","category":"section"},{"location":"OpenTelemetryProto/","page":"OpenTelemetryProto","title":"OpenTelemetryProto","text":"This package provides the julia client code to the original proto files with gRPCClient.jl and ProtoBuf.jl.","category":"page"},{"location":"OpenTelemetryProto/","page":"OpenTelemetryProto","title":"OpenTelemetryProto","text":"note: Note\nThe major and minor version of OpenTelemetryProto is aligned with the release of original opentelemetry-proto. The patch version is Julia specific.","category":"page"},{"location":"OpenTelemetryProto/","page":"OpenTelemetryProto","title":"OpenTelemetryProto","text":"Modules = [OpenTelemetryProto]\nPrivate = false","category":"page"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"","category":"section"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"The content in this page is organized in the same order as the OpenTelemetry Specification.","category":"page"},{"location":"OpenTelemetryAPI/#Context","page":"OpenTelemetryAPI","title":"Context","text":"","category":"section"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"All the MUST items in the original specification are implemented.","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"Context is implemented as a wrapper of NamedTuple, which means it is immutable. Each Task has exactly ONE Context instance, which is injected into the task_local_storage of the current_task by the parent task automatically.","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"warning: Warning\nType piracy is used to the propagate context between tasks. See more discussions in #32","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"create_key is used to create a context key. But it is not exported yet because it seems to be only used internally until now.","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"Base.getindex(::Context, key) is implemented so to get a value in a Context, one can simply call ctx[key] to get the associated value of a key in a ctx.","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"Setting value of a Context is not directly supported. Given that Context is immutable, updating an immutable object in Julia seems strange. We provide the with_context function to create a new context based on the key-value pairs in the current_context. This syntax is more common than the attach/detach operations in the original specification.","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"Modules = [OpenTelemetryAPI]\nPages = [\"context.jl\"]\nPrivate = false","category":"page"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.current_context-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.current_context","text":"Return the Context associated with the caller's current execution unit.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.with_context-Tuple{Any, OpenTelemetryAPI.Context}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.with_context","text":"with_context(f, [context]; kv...)\n\nRun function f in the context. If extra kv pairs are provided, they will be merged with the context to form a new context. When context is not provided, the current_context will be used.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#Propagators","page":"OpenTelemetryAPI","title":"Propagators","text":"","category":"section"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"inject! and extract are provided based on the original specification.","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"The GLOBAL_PROPAGATOR is set to a CompositePropagator, with multiple dispatch, each inner propagator can be customized to handle different contexts and carriers. Since it's mainly used internally for now, it's not exposed yet.","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"Modules = [OpenTelemetryAPI]\nPages = [\"propagator_basic.jl\", \"textmap_propagator.jl\"]\nPrivate = false","category":"page"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.TraceContextTextMapPropagator","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.TraceContextTextMapPropagator","text":"TraceContextTextMapPropagator()\n\nThis propagator follows the W3C format\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#Trace","page":"OpenTelemetryAPI","title":"Trace","text":"","category":"section"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"The relationship between trace provider, tracer, span context and span is depicted below:","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"┌────────────────────────────┐\n│ AbstractSpan               │\n│   ┌──────────────────────┐ │\n│   │ Tracer               │ │\n│   │   ┌────────────────┐ │ │\n│   │   │    Abstract    │ │ │\n│   │   │ TracerProvider │ │ │\n│   │   └────────────────┘ │ │\n│   │  instrumentation     │ │\n│   │   ┌────────────────┐ │ │\n│   │   │ name           │ │ │\n│   │   │ version        │ │ │\n│   │   └────────────────┘ │ │\n│   └──────────────────────┘ │\n└────────────────────────────┘","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"In OpenTelemetryAPI.jl, only one concrete AbstractTracerProvider (the DummyTracerProvider) is provided. It is set as the  default global_tracer_provider. Without SDK installed, the with_span will only create a NonRecordingSpan. This is to make the OpenTelemetryAPI.jl lightweight enough so that instrumentation package users can happily add it as a dependency without losing performance.","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"Modules = [OpenTelemetryAPI]\nPages = [\"tracer_provider.jl\"]\nPrivate = false","category":"page"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.AbstractSpan","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.AbstractSpan","text":"Each concrete span should have the following interfaces implemented.\n\ntracer\nspan_context\nspan_kind\nparent_span_context\nattributes\nis_recording\nstart_time\nend_time\nend_span!\nspan_status!\nspan_status\nspan_name!\nspan_name\nspan_links\nspan_events\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.Tracer","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.Tracer","text":"Tracer(;instrumentation_scope=InstrumentationScope(), provider=global_meter_provider())\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.attributes-Tuple{OpenTelemetryAPI.NonRecordingSpan}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.attributes","text":"attributes(s::AbstractSpan)\n\nA BoundedAttributes is expected.\n\nwarning: Warning\nDo not modify the returned attributes directly. Users should always modify attributes through (s::AbstractSpan)[key]=val because it will check the is_recording(s) first.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.end_span!-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.end_span!","text":"end_span!([s=current_span()], [t=UInt(time()*10^9)])\n\nSet the end time of the span and trigger span processors. Note t is the nanoseconds.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.global_tracer_provider-Tuple{Any}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.global_tracer_provider","text":"global_tracer_provider(p)\n\nSet the global tracer provider to p.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.global_tracer_provider-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.global_tracer_provider","text":"global_tracer_provider()\n\nGet the global tracer provider.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.is_recording-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.is_recording","text":"is_recording([current_span()])\n\nReturns true if this span s is recording information like Event operations, attribute modification using setindex!, etc.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.parent_span_context-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.parent_span_context","text":"parent_span_context(s::AbstractSpan)\n\nGet the SpanContext from parent span.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.provider-Tuple{AbstractSpan}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.provider","text":"provider(s::AbstractSpan)\n\nGet the AbstractTracerProvider which generates the tracer that the span s resides in.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.resource-Tuple{AbstractSpan}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.resource","text":"resource(s::AbstractSpan)\n\nGet the associated resource of the span s. Fall back to resource(provider(::AbstractSpan))\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.span_context-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.span_context","text":"span_context([s::AbstractSpan])\n\nGet the SpanContext from a span s. If s is not specified, current_span() will be used. nothing is returned if no span context found.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.span_events-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.span_events","text":"span_events(s::AbstractSpan)\n\nGet the recorded events in a span.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.span_kind-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.span_kind","text":"span_kind([current_span()])\n\nReturn SpanKind\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.span_links-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.span_links","text":"span_links(s::AbstractSpan)\n\nGet the recorded links in a span.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.span_name!-Tuple{String}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.span_name!","text":"span_name!([current_span()], name::String)\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.span_name-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.span_name","text":"span_name([current_span()])\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.span_status!-Tuple{SpanStatusCode, Any}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.span_status!","text":"span_status!([current_span()], code::SpanStatusCode, description=nothing)\n\nUpdate the status of span s by following the original specification. description is only considered when the code is SPAN_STATUS_ERROR. Only valid when the span is not ended yet.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.span_status-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.span_status","text":"span_status([current_span()])\n\nGet status of the span. A SpanStatusCode is returned.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.tracer-Tuple{OpenTelemetryAPI.NonRecordingSpan}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.tracer","text":"tracer(s::AbstractSpan)\n\nGet the Tracer which generates the span s.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.with_span","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.with_span","text":"with_span(f, name::String, [tracer=Tracer()];kw...)\n\nCall function f with the current span set a newly created one of name with tracer.\n\nKeyword arguments\n\nend_on_exit=true, controls whether to call end_span! after f or not.\nrecord_exception=true, controls whether to record the exception.\nset_status_on_exception=true, decides whether to set status to SPAN_STATUS_ERROR automatically when an exception is caught.\nThe rest keyword arguments are forwarded to create_span.\n\n\n\n\n\n","category":"function"},{"location":"OpenTelemetryAPI/#Metric","page":"OpenTelemetryAPI","title":"Metric","text":"","category":"section"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"The relationship between MeterProvider, Meter and different instruments are depicted below:","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":" ┌─────────────────────────────┐\n │AbstractInstrument           │\n │                             │\n │  name                       │\n │  unit                       │\n │  description                │\n │                             │\n │  meter                      │\n │   ┌───────────────────────┐ │\n │   │Meter                  │ │\n │   │                       │ │\n │   │  provider             │ │\n │   │   ┌────────────────┐  │ │\n │   │   │   Abstract     │  │ │\n │   │   │ MeterProvider  │  │ │\n │   │   └────────────────┘  │ │\n │   │  name                 │ │\n │   │  version              │ │\n │   │  schema_url           │ │\n │   │                       │ │\n │   │  instrumentation      │ │\n │   │   ┌────────────────┐  │ │\n │   │   │ name           │  │ │\n │   │   │ version        │  │ │\n │   │   └────────────────┘  │ │\n │   │  instruments          │ │\n │   │                       │ │\n │   │    * Counter          │ │\n │   │    * Histogram        │ │\n │   │    * UpDownCounter    │ │\n │   │    * ObservableCounter│ │\n │   │    * Observable       │ │\n │   │      UpDownCounter    │ │\n │   └───────────────────────┘ │\n │                             │\n └─────────────────────────────┘","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"An Instrument belongs to a Meter, each Meter may contain many different Instruments. Similarly, a Meter belongs to a MeterProvider and a MeterProvider may contain many different Meters.","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"Modules = [OpenTelemetryAPI]\nPages = [\"metric_provider.jl\"]\nPrivate = false","category":"page"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.Meter","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.Meter","text":"Meter(name::String;kw...)\n\nMeter is responsible for creating instruments.\n\nKeyword Arguments:\n\nprovider::P = global_meter_provider()\ninstrumentation_scope = InstrumentationScope()\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.global_meter_provider-Tuple{Any}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.global_meter_provider","text":"global_meter_provider(p)\n\nSet the global meter provider to p.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.global_meter_provider-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.global_meter_provider","text":"global_meter_provider()\n\nGet the global meter provider.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#Instruments","page":"OpenTelemetryAPI","title":"Instruments","text":"","category":"section"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"All instruments provided here can be classified into two categories: AbstractSyncInstrument and AbstractAsyncInstrument.","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"Modules = [OpenTelemetryAPI]\nPages = [\"instruments.jl\"]\nPrivate = false","category":"page"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.Counter","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.Counter","text":"Counter{T}(name, meter;unit=\"\", description=\"\") where T\n\nCounter is a AbstractSyncInstrument which supports non-negative increments.\n\nSee more details from the specification.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.Histogram","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.Histogram","text":"Histogram{T}(name, meter; unit = \"\", description = \"\") where {T}\n\nHistogram is an AbstractSyncInstrument which can be used to report arbitrary values that are likely to be statistically meaningful. It is intended for statistics such as histograms, summaries, and percentile.\n\nSee more details from the specification\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.Measurement","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.Measurement","text":"Measurement(value, [attributes=BoundedAttributes()])\n\nThis is to follow the specification\n\nSee also BoundedAttributes\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.ObservableCounter","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.ObservableCounter","text":"ObservableCounter{T}(callback, name, meter; unit = \"\", description = \"\") where {T}\n\nObservableCounter is an AbstractAsyncInstrument which reports monotonically increasing value(s) when the instrument is being observed.\n\nSee more details from the specification\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.ObservableGauge","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.ObservableGauge","text":"ObservableGauge{T}(callback, name, meter; unit = \"\", description = \"\",) where {T}\n\nObservableGauge is an AbstractAsyncInstrument which reports non-additive value(s) (e.g. the room temperature - it makes no sense to report the temperature value from multiple rooms and sum them up) when the instrument is being observed.\n\nSee also the details from the specification\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.ObservableUpDownCounter","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.ObservableUpDownCounter","text":"ObservableUpDownCounter{T}(callback, name, meter; unit = \"\", description = \"\") where {T}\n\nObservableUpDownCounter is an AbstractAsyncInstrument which reports additive value(s) (e.g. the process heap size - it makes sense to report the heap size from multiple processes and sum them up, so we get the total heap usage) when the instrument is being observed.\n\nSee more details from the specification.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.UpDownCounter","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.UpDownCounter","text":"UpDownCounter{T}(name, meter; unit = \"\", description = \"\") where {T}\n\nUpDownCounter is a AbstractSyncInstrument which supports increments and decrements.\n\nSee also the details from the specification.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#Logging","page":"OpenTelemetryAPI","title":"Logging","text":"","category":"section"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"The idea is simple, a OtelLogTransformer is provided to transform each logging message into a LogRecord. To understand how to use it, users should be familiar with how TransformerLogger from LoggingExtras.jl works.","category":"page"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"Modules = [OpenTelemetryAPI]\nPages = [\"log.jl\"]\nPrivate = false","category":"page"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.LogRecord","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.LogRecord","text":"LogRecord(;kw...)\n\nA Julia representation of the Log Data Model.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OtelLogTransformer","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OtelLogTransformer","text":"OtelLogTransformer(resource::Resource)\n\nIt can be used as a function f to the TransformerLogger. After applying this transformer, a LogRecord will be returned.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#Misc","page":"OpenTelemetryAPI","title":"Misc","text":"","category":"section"},{"location":"OpenTelemetryAPI/","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI","text":"Modules = [OpenTelemetryAPI]","category":"page"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.TAttrVal","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.TAttrVal","text":"Valid type of attribute value.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.AbstractAsyncInstrument","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.AbstractAsyncInstrument","text":"Async instrument usually has a callback function (which is named Observable in OpenTelemetry) to get its measurement.\n\nnote: Note\nIf the return of the callback function is not a Measurement, it will be converted into a Measurement with an empty BoundedAttributes implicitly when being uploaded to the associated meter provider.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.AbstractInstrument","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.AbstractInstrument","text":"AbstractInstrumentis the super type of all instruments, which are used to report [Measurement`](@ref)s.\n\nEach concrete subtype should at least have the following fields:\n\nname\ndescription\nunit\nmeter, the associated Meter\n\nSee also the specification:\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.AbstractMeterProvider","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.AbstractMeterProvider","text":"A meter provider defines how to collect and update Measurements. Each meter provider should have the following interfaces implemented:\n\nBase.push!(provider, m::Meter), register a meter.\nBase.push!(provider, ins::AbstractInstrument), register an instrument.\nBase.push!(provider, (ins::AbstractInstrument, m::Measurement)), update a measurement.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.AbstractSyncInstrument","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.AbstractSyncInstrument","text":"Sync instrument usually pass its measurement immediately.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.AbstractTracerProvider","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.AbstractTracerProvider","text":"A tracer provider is a part of an Tracer. For each concrete tracer provider, resource and OpenTelemetryAPI.create_span(name::String, tracer::Tracer{<:YourCustomProvider}) should also be implemented.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.BoundedAttributes","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.BoundedAttributes","text":"BoundedAttributes(attrs; count_limit=nothing, value_length_limit=nothing)\n\nThis provides a wrapper around attributes (typically AbstractDict or NamedTuple) to follow the specification of Attribute.\n\nThe following methods from Base are defined on BoundedAttributes which are then forwarded to the inner attrs by default. Feel free to create a PR if you find any method you need is missing:\n\nBase.getindex\nBase.setindex!\nBase.iterate\nBase.length\nBase.haskey\nBase.push!. Obviously, an error will be thrown when calling on immutable attrss like NamedTuple.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.CompositePropagator","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.CompositePropagator","text":"CompositePropagator(propagators::Vector)\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.Event","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.Event","text":"Event(name, attributes; timestamp=time()*10^9)\n\ntimestamp is the nanoseconds.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.InstrumentationScope","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.InstrumentationScope","text":"InstrumentationScope(;name=\"Main\", version=v\"0.0.1-dev\")\n\nUsually used in an instrumentation package.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.LimitInfo","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.LimitInfo","text":"LimitInfo(;kw...)\n\nUsed in TracerProvider to configure generated Tracer.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.Link","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.Link","text":"Link(span_context, attributes)\n\nSee more details at links between spans.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.Resource","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.Resource","text":"Resource(;attributes=nothing, schema_url=\"\")\n\nQuoted from the specification:\n\nResource captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.SpanContext","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.SpanContext","text":"SpanContext(;span_id, trace_id, is_remote, trace_flag=TraceFlag(), trace_state=TraceState())\n\nA SpanContext represents the portion of a Span which must be serialized and propagated along side of a distributed context. SpanContexts are immutable.\n\nThe OpenTelemetry SpanContext representation conforms to the W3C TraceContext specification. It contains two identifiers - a TraceId and a SpanId - along with a set of common TraceFlags and system-specific TraceState values.\n\nTraceId A valid trace identifier is a 16-byte array with at least one non-zero byte.\n\nSpanId A valid span identifier is an 8-byte array with at least one non-zero byte.\n\nTraceFlags contain details about the trace. Unlike TraceState values, TraceFlags are present in all traces. The current version of the specification only supports a single flag called sampled.\n\nTraceState carries vendor-specific trace identification data, represented as a list of key-value pairs. TraceState allows multiple tracing systems to participate in the same trace. It is fully described in the W3C Trace Context specification.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.SpanStatus","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.SpanStatus","text":"SpanStatus(code, description=nothing)\n\nPossible codes are:\n\nSPAN_STATUS_UNSET\nSPAN_STATUS_ERROR\nSPAN_STATUS_OK\n\ndescription is required when code is SPAN_STATUS_ERROR.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.TraceState","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.TraceState","text":"TraceState(entries::Pair{String,String}...)\n\nTraceState carries vendor-specific trace identification data, represented as a list of key-value pairs. TraceState allows multiple tracing systems to participate in the same trace. It is fully described in the W3C Trace Context specification.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryAPI/#Base.getindex-Tuple{AbstractSpan, Any}","page":"OpenTelemetryAPI","title":"Base.getindex","text":"Base.getindex(s::AbstractSpan, key)\n\nLook up key in the attributes of the span s.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#Base.haskey-Tuple{AbstractSpan, Any}","page":"OpenTelemetryAPI","title":"Base.haskey","text":"Base.haskey(s::AbstractSpan, key)\n\nCheck if the span s has the key in its attributes.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#Base.push!-Tuple{Event}","page":"OpenTelemetryAPI","title":"Base.push!","text":"Base.push!([s::AbstractSpan], event::Event)\n\nAdd an Event into the span s.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#Base.push!-Tuple{Link}","page":"OpenTelemetryAPI","title":"Base.push!","text":"Base.push!([current_span()], link::Link)\n\nAdd a Link into the span s.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#Base.push!-Tuple{OpenTelemetryAPI.NonRecordingSpan, Exception}","page":"OpenTelemetryAPI","title":"Base.push!","text":"Base.push!(s::AbstractSpan, ex::Exception; is_rethrow_followed = false)\n\nA specialized variant of Event to record exceptions. Usually used in a try... catch...end to capture the backtrace. If the ex is rethrowed in the catch...end, is_rethrow_followed should be set to true.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#Base.setindex!-Tuple{AbstractSpan, Any, Any}","page":"OpenTelemetryAPI","title":"Base.setindex!","text":"(s::AbstractSpan)[key] = val\n\nSet the attributes in span s. Only valid when the span is not ended yet.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_ATTRIBUTE_COUNT_LIMIT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_ATTRIBUTE_COUNT_LIMIT","text":"Maximum allowed span attribute count\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT","text":"Maximum allowed attribute value size\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_BLRP_EXPORT_TIMEOUT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_BLRP_EXPORT_TIMEOUT","text":"Maximum allowed time (in milliseconds) to export data\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_BLRP_MAX_EXPORT_BATCH_SIZE-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_BLRP_MAX_EXPORT_BATCH_SIZE","text":"Maximum batch size Must be less than or equal to OTELBLRPMAXQUEUESIZE\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_BLRP_MAX_QUEUE_SIZE-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_BLRP_MAX_QUEUE_SIZE","text":"Maximum queue size\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_BLRP_SCHEDULE_DELAY-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_BLRP_SCHEDULE_DELAY","text":"Delay interval (in milliseconds) between two consecutive exports\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_BSP_EXPORT_TIMEOUT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_BSP_EXPORT_TIMEOUT","text":"Maximum allowed time (in milliseconds) to export data\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_BSP_MAX_EXPORT_BATCH_SIZE-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_BSP_MAX_EXPORT_BATCH_SIZE","text":"Maximum batch size\n\nMust be less than or equal to OTELBSPMAXQUEUESIZE\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_BSP_MAX_QUEUE_SIZE-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_BSP_MAX_QUEUE_SIZE","text":"Maximum queue size\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_BSP_SCHEDULE_DELAY-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_BSP_SCHEDULE_DELAY","text":"Delay interval (in milliseconds) between two consecutive exports\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_EVENT_ATTRIBUTE_COUNT_LIMIT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_EVENT_ATTRIBUTE_COUNT_LIMIT","text":"Maximum allowed attribute per span event count\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_EXPORTER_PROMETHEUS_HOST-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_EXPORTER_PROMETHEUS_HOST","text":"Host used by the Prometheus exporter\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_EXPORTER_PROMETHEUS_PORT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_EXPORTER_PROMETHEUS_PORT","text":"Port used by the Prometheus exporter\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_LINK_ATTRIBUTE_COUNT_LIMIT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_LINK_ATTRIBUTE_COUNT_LIMIT","text":"Maximum allowed attribute per span link count\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT","text":"Maximum allowed log record attribute count\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT","text":"Maximum allowed attribute value size\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_LOGS_EXPORTER-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_LOGS_EXPORTER","text":"Logs exporter to be used\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_LOG_LEVEL-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_LOG_LEVEL","text":"Log level used by the SDK logger.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_METRICS_EXEMPLAR_FILTER-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_METRICS_EXEMPLAR_FILTER","text":"Filter for which measurements can become Exemplars.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_METRICS_EXPORTER-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_METRICS_EXPORTER","text":"Metrics exporter to be used\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_METRIC_EXPORT_INTERVAL-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_METRIC_EXPORT_INTERVAL","text":"The time interval (in milliseconds) between the start of two export attempts.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_METRIC_EXPORT_TIMEOUT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_METRIC_EXPORT_TIMEOUT","text":"Maximum allowed time (in milliseconds) to export data.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_PROPAGATORS-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_PROPAGATORS","text":"Propagators to be used as a comma-separated list .\n\nValues MUST be deduplicated in order to register a Propagator only once.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_RESOURCE_ATTRIBUTES-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_RESOURCE_ATTRIBUTES","text":"Key-value pairs to be used as resource attributes.\n\nSee Resource SDK for more details.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_SDK_DISABLED-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_SDK_DISABLED","text":"Disable the SDK for all signals.\n\nBoolean value. If \"true\", a no-op SDK implementation will be used for all telemetry signals. Any other value or absence of the variable will have no effect and the SDK will remain enabled. This setting has no effect on propagators configured through the OTEL_PROPAGATORS variable.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_SERVICE_NAME-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_SERVICE_NAME","text":"Sets the value of the service.name resource attribute.\n\nIf service.name is also provided in OTEL_RESOURCE_ATTRIBUTES, then OTEL_SERVICE_NAME takes precedence.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","text":"Maximum allowed span attribute count\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT","text":"Maximum allowed attribute value size\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_SPAN_EVENT_COUNT_LIMIT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_SPAN_EVENT_COUNT_LIMIT","text":"Maximum allowed span event count\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_SPAN_LINK_COUNT_LIMIT-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_SPAN_LINK_COUNT_LIMIT","text":"Maximum allowed span link count\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_TRACES_EXPORTER-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_TRACES_EXPORTER","text":"Trace exporter to be used\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_TRACES_SAMPLER-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_TRACES_SAMPLER","text":"Sampler to be used for traces.\n\nSee Sampling\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.OTEL_TRACES_SAMPLER_ARG-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.OTEL_TRACES_SAMPLER_ARG","text":"String value to be used as the sampler argument.\n\nThe specified value will only be used if OTELTRACESSAMPLER is set. Each Sampler type defines its own expected input, if any. Invalid or unrecognized input MUST be logged and MUST be otherwise ignored, i.e. the SDK MUST behave as if OTELTRACESSAMPLER_ARG is not set.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.clean_attrs!-Tuple{Any, Any, Any}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.clean_attrs!","text":"Follow the specification on Attribute Limits. The cleaned attributes and the number of dropped elements is returned.\n\nwarn: Warn\nIf attrs is mutable, it may be modified in-place.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.create_span-Tuple{String, Tracer{OpenTelemetryAPI.DummyTracerProvider}}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.create_span","text":"Here we follow the Behavior of the API in the absence of an installed SDK.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.current_span-Tuple{}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.current_span","text":"current_span([current_context])\n\nGet the span in the current context.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.end_time-Tuple{OpenTelemetryAPI.NonRecordingSpan}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.end_time","text":"end_time(s::AbstractSpan)\n\nGet the end time of span s in nanoseconds.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.extract","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.extract","text":"extract(carrier, [global_propagator], [current_context])\n\nExtracts the value from an incoming request. For example, from the headers of an HTTP request.\n\n\n\n\n\n","category":"function"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.extract_attrs-Tuple{Any}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.extract_attrs","text":"Turn \"a=b,c=d\" into a NamedTuple\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.inject!","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.inject!","text":"inject(carrier, [global_propagator], [current_context])\n\nInjects the value into a carrier. For example, into the headers of an HTTP request.\n\n\n\n\n\n","category":"function"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.n_dropped-Tuple{BoundedAttributes}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.n_dropped","text":"n_dropped(x::BoundedAttributes)\n\nReturn the total number of dropped elements since creation.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryAPI/#OpenTelemetryAPI.start_time-Tuple{OpenTelemetryAPI.NonRecordingSpan}","page":"OpenTelemetryAPI","title":"OpenTelemetryAPI.start_time","text":"start_time(s::AbstractSpan)\n\nGet the start time of span s in nanoseconds.\n\n\n\n\n\n","category":"method"},{"location":"OpenTelemetryExporterOtlpProtoGrpc/#OpenTelemetryExporterOtlpProtoGrpc","page":"OpenTelemetryExporterOtlpProtoGrpc","title":"OpenTelemetryExporterOtlpProtoGrpc","text":"","category":"section"},{"location":"OpenTelemetryExporterOtlpProtoGrpc/","page":"OpenTelemetryExporterOtlpProtoGrpc","title":"OpenTelemetryExporterOtlpProtoGrpc","text":"This package uses OpenTelemetryProto to communicate with OTEL Collector through gRPC.","category":"page"},{"location":"OpenTelemetryExporterOtlpProtoGrpc/","page":"OpenTelemetryExporterOtlpProtoGrpc","title":"OpenTelemetryExporterOtlpProtoGrpc","text":"Modules = [OpenTelemetryExporterOtlpProtoGrpc]\nPrivate = false","category":"page"},{"location":"OpenTelemetryExporterPrometheus/#OpenTelemetryExporterPrometheus","page":"OpenTelemetryExporterPrometheus","title":"OpenTelemetryExporterPrometheus","text":"","category":"section"},{"location":"OpenTelemetryExporterPrometheus/","page":"OpenTelemetryExporterPrometheus","title":"OpenTelemetryExporterPrometheus","text":"In this package, only one AbstractExporter is exported: the PrometheusExporter. With this exporter, one can use the Prometheus to view the Metrics.","category":"page"},{"location":"OpenTelemetryExporterPrometheus/","page":"OpenTelemetryExporterPrometheus","title":"OpenTelemetryExporterPrometheus","text":"Modules = [OpenTelemetryExporterPrometheus]\nPrivate = false","category":"page"},{"location":"OpenTelemetryExporterPrometheus/#OpenTelemetryExporterPrometheus.PrometheusExporter","page":"OpenTelemetryExporterPrometheus","title":"OpenTelemetryExporterPrometheus.PrometheusExporter","text":"PrometheusExporter(; kw...)\n\nKeyword arguments\n\nhost, the default value is read from the OTEL_EXPORTER_PROMETHEUS_HOST environment variable.\nport, the default value is read from the OTEL_EXPORTER_PROMETHEUS_PORT environment variable.\nresource_to_telemetry_conversion=false, if enabled, all the resource attributes will be converted to metric labels by default.\npath=\"/metrics\", the default url path.\n\nUsage\n\nr = MetricReader(PrometheusExporter())\n\nNote that PrometheusExporter is a pull based exporter. There's no need to execute r() to update the metrics.\n\n\n\n\n\n","category":"type"},{"location":"OpenTelemetryInstrumentationBase/#OpenTelemetryInstrumentationBase","page":"OpenTelemetryInstrumentationBase","title":"OpenTelemetryInstrumentationBase","text":"","category":"section"},{"location":"OpenTelemetryInstrumentationBase/","page":"OpenTelemetryInstrumentationBase","title":"OpenTelemetryInstrumentationBase","text":"Modules = [OpenTelemetryInstrumentationBase]","category":"page"},{"location":"OpenTelemetryInstrumentationDistributed/#OpenTelemetryInstrumentationDistributed","page":"OpenTelemetryInstrumentationDistributed","title":"OpenTelemetryInstrumentationDistributed","text":"","category":"section"},{"location":"OpenTelemetryInstrumentationDistributed/","page":"OpenTelemetryInstrumentationDistributed","title":"OpenTelemetryInstrumentationDistributed","text":"Modules = [OpenTelemetryInstrumentationDistributed]","category":"page"},{"location":"tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector/#Send-Logs-to-Loki-via-OpenTelemetry-Collector","page":"Send Logs to Loki via OpenTelemetry Collector","title":"Send Logs to Loki via OpenTelemetry Collector","text":"","category":"section"},{"location":"tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector/","page":"Send Logs to Loki via OpenTelemetry Collector","title":"Send Logs to Loki via OpenTelemetry Collector","text":"Two loggers are provided by OpenTelemetry.jl, OtelSimpleLogger and OtelBatchLogger. If you're familiar with the concepts in LoggingExtras.jl, those two loggers can be treat like sinks. In previous examples, we've learned how to print logs in the console.","category":"page"},{"location":"tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector/","page":"Send Logs to Loki via OpenTelemetry Collector","title":"Send Logs to Loki via OpenTelemetry Collector","text":"using OpenTelemetry\nusing Term # optional, for better display\nusing Logging\n\nglobal_logger(OtelSimpleLogger());\n\n@info \"Hello, World!\"\n@warn \"from\"\n@error \"OpenTelemetry.jl!\"","category":"page"},{"location":"tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector/","page":"Send Logs to Loki via OpenTelemetry Collector","title":"Send Logs to Loki via OpenTelemetry Collector","text":"To send logs to OpenTelemetry Collector, we can specify the exporter explicitly when initializing the OtelSimpleLogger.","category":"page"},{"location":"tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector/","page":"Send Logs to Loki via OpenTelemetry Collector","title":"Send Logs to Loki via OpenTelemetry Collector","text":"global_logger(OtelSimpleLogger(exporter=OtlpHttpLogsExporter()))","category":"page"},{"location":"tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector/","page":"Send Logs to Loki via OpenTelemetry Collector","title":"Send Logs to Loki via OpenTelemetry Collector","text":"The next step is to setup OpenTelemetry Collector, Loki and Grafana web portal to view the collected logs.","category":"page"},{"location":"tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector/","page":"Send Logs to Loki via OpenTelemetry Collector","title":"Send Logs to Loki via OpenTelemetry Collector","text":"cd docs/src/tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector\ndocker compose up","category":"page"},{"location":"tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector/","page":"Send Logs to Loki via OpenTelemetry Collector","title":"Send Logs to Loki via OpenTelemetry Collector","text":"Again, let's log some messages in Julia:","category":"page"},{"location":"tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector/","page":"Send Logs to Loki via OpenTelemetry Collector","title":"Send Logs to Loki via OpenTelemetry Collector","text":"@info \"Hello, World!\"\n@warn \"from\"\n@error \"OpenTelemetry.jl!\"","category":"page"},{"location":"tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector/","page":"Send Logs to Loki via OpenTelemetry Collector","title":"Send Logs to Loki via OpenTelemetry Collector","text":"Now open Grafana (http://localhost:3000/) in your browser. You shold find the logs we just recorded as depicted below:","category":"page"},{"location":"tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector/","page":"Send Logs to Loki via OpenTelemetry Collector","title":"Send Logs to Loki via OpenTelemetry Collector","text":"(Image: )","category":"page"},{"location":"tutorials/Send_Logs_to_Loki_via_OpenTelemetry_Collector/","page":"Send Logs to Loki via OpenTelemetry Collector","title":"Send Logs to Loki via OpenTelemetry Collector","text":"Similar to BatchSpanProcessor, in practice, we usually send logs in batches instead of sending them immediately one-by-one.","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/#View-Metrics/Traces/Logs-in-Grafana/ElasticAPM","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"","category":"section"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"In previous tutorials, we've learned how to record and visualize metrics. This tutorial will continue on exploring traces and logs. In the end, we'll see how these three pillars are fused together to improve the observability of your system.","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/#Traces","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"Traces","text":"","category":"section"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"In short, traces are used to record the time spans of each element operations we are interested in during a function call. In OpenTelemetry.jl, we use with_span to initiate a new span. Each span can be nested in another span. And the outest one is called the root span, which naturally forms one trace.","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"using OpenTelemetry\n\nwith_span(\"Hello\") do\n    with_span(\"World\") do\n        println(\"Hello world from OpenTelemetry.jl!\")\n    end\nend","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"For example, here we created two spans, the root span is named \"Hello\". By default, the spans are print to the console in detail. To visualize them, we can follow what we did before to set up the OpenTelemetry Collector first.","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"cd docs/src/tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM\ndocker-compose -f docker-compose-jaeger.yml up","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"Then how to send the spans to OpenTelemetry Collector?","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"The idea is very similar to the logging system in Julia. At the end of each span, it will be sent to the global_tracer_provider implicitly. We can configure it to forward spans to the OpenTelemetry Collector.","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"global_tracer_provider!(\n    TracerProvider(\n        span_processor=SimpleSpanProcessor(\n            OtlpProtoGrpcTraceExporter()\n        )\n    )\n)","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"Now create the spans again:","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"with_span(\"Hello\") do\n    with_span(\"World\") do\n        println(\"Hello world from OpenTelemetry.jl!\")\n    end\nend","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"Then open the Jaeger UI at http://localhost:16686. You can find the trace we just created by filtering the Operations with span name.","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/#View-Traces-in-Tempo","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Traces in Tempo","text":"","category":"section"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"Should be similar to Jaeger, but I haven't test it yet.","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/#Logs","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"Logs","text":"","category":"section"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/#View-Logs-in-Loki","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Logs in Loki","text":"","category":"section"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"Wait https://github.com/grafana/loki/issues/5346","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/#Putting-Them-All-Together","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"Putting Them All Together","text":"","category":"section"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/#Grafana","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"Grafana","text":"","category":"section"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"TODO, wait Logs are supported in Loki","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/#Elastic-APM","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"Elastic APM","text":"","category":"section"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"Elastic APM is very powerful to help you gain insights across logs, traces and metrics. However, setting up a workable Elastic APM environment may be over complicated for first time users. What make it more difficulty is the security related configurations enabled by default after ElasticSearch 8. Since you decide to give it a try, I can safely assume you are familiar with ElasticSearch, Kibana and a little bit about APM-Server. From the architecture level, Elastic APM is similar to what we've seen before. If you've already got a functional ElasticSearch and Kibana, then follow the official documentation to set up the Fleet and add the APM integration. In the 4th step, Install APM Agents, you'll find that there's no Julia related APM agent yet! And that's why we use OpenTelemetry.jl! If you're familiar with one of the programming languages listed there, give it a try and explore the exported data in Kibana. Then come back and see how to do it with OpenTelemetry.jl.","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"If you do not have ElasticSearch and Kibana installed yet, you can follow the following instructions to set them up quickly. Most of the configs are adapted from apm-server/docker-compose.yml. Note that they are for test only, do not use them in production environments. (DO NOT SAY I DIDN'T WARN YOU!)","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"cd docs/src/tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_Logstash_SigNoz\ndocker-compose up","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"Then login to the kibana at localhost:5601 with the username admin and password changeme if you didn't change them. After that, follow the step 3 in the official documentation to add a APM integration. You may want to change the host and url to 0.0.0.0:8200 and http://0.0.0.0:8200.","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"The only left one is to setup the OpenTelemetry Collector. In the docker-compose.yml file, it's already setup. You can read more details on the configurations at OpenTelemetry Integration in Elastic APM.","category":"page"},{"location":"tutorials/View_Logs_Traces,_and_Metrics_Together_in_Grafana_ElasticAPM/","page":"View Metrics/Traces/Logs in Grafana/ElasticAPM","title":"View Metrics/Traces/Logs in Grafana/ElasticAPM","text":"The rest is the same as we did before. Open the Julia REPL and try to add some traces/logs/metrics to the OpenTelemetry Collector. Then explore the collected data by following step 5 in the official doc on Elastic APM.","category":"page"},{"location":"#OpenTelemetry.jl","page":"Home","title":"OpenTelemetry.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: doc) (Image: CI) (Image: codecov) (Image: ) (Image: ColPrac: Contributor's Guide on Collaborative Practices for Community Packages)","category":"page"},{"location":"","page":"Home","title":"Home","text":"An unofficial implementation of OpenTelemetry in Julia.","category":"page"},{"location":"#Get-Started","page":"Home","title":"Get Started","text":"","category":"section"},{"location":"#Logs","page":"Home","title":"Logs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using OpenTelemetry\nusing Term # optional, for better display\nusing Logging\n\nglobal_logger(OtelSimpleLogger());\n\n@info \"Hello, World!\"\n@warn \"from\"\n@error \"OpenTelemetry.jl!\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img src=\"./docs/src/assets/loginfo.png\" height=\"320\"/><img src=\"./docs/src/assets/logwarn.png\" height=\"320\" /><img src=\"./docs/src/assets/log_error.png\" height=\"320\"/>","category":"page"},{"location":"#Traces","page":"Home","title":"Traces","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"global_tracer_provider(TracerProvider());\n\nwith_span(\"Hello, World!\") do\n    with_span(\"from\") do\n        @info \"OpenTelemetry.jl!\"\n    end\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img src=\"./docs/src/assets/spaninfo.png\" height=\"400\"/><img src=\"./docs/src/assets/spaninner.png\" height=\"400\" /><img src=\"./docs/src/assets/span_outer.png\" height=\"400\"/>","category":"page"},{"location":"#Metrics","page":"Home","title":"Metrics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"global_meter_provider(MeterProvider());\n\nm = Meter(\"demo_metrics\");\nc = Counter{Int}(\"fruit_counter\", m);\n\nc(; name = \"apple\", color = \"red\")\nc(2; name = \"lemon\", color = \"yellow\")\nc(1; name = \"lemon\", color = \"yellow\")\nc(2; name = \"apple\", color = \"green\")\nc(5; name = \"apple\", color = \"red\")\nc(4; name = \"lemon\", color = \"yellow\")\n\nr = MetricReader();\nr()","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img src=\"./docs/src/assets/metrics.png\" height=\"480\"/>","category":"page"},{"location":"#Tutorial","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"It's recommended to walk through these tutorials one-by-one.","category":"page"},{"location":"","page":"Home","title":"Home","text":"View Metrics in Prometheus\nView Metrics in Prometheus through Open Telemetry Collector\nView Traces in Jaeger\nSend Logs to Loki via OpenTelemetry Collector\nAn End-to-end Toy Example with Auto Instrumentation across Different Languages\nCase Study 1: Empower Dagger.jl with OpenTelemetry.jl\nCase Study 2: Empower AlphaZero.jl with OpenTelemetry.jl","category":"page"},{"location":"#Tips-for-Developers","page":"Home","title":"Tips for Developers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(WIP)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Understand the Architecture of OpenTelemetry.jl\nHow to Add Instrumentation to a Third-party Package?\nHow to Extend OpenTelemetrySDK?\nConventions and Best Practices to Instrument Your Application","category":"page"},{"location":"#FAQ","page":"Home","title":"FAQ","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Some frequently asked questions are maintained here. If you can't find the answer to your question there, please create an issue. Your feedback is VERY IMPORTANT to the quality of this package❤.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Method overwritten warning","category":"page"},{"location":"","page":"Home","title":"Home","text":"When building OpenTelemetrySDK for the first time, you'll see the following warning message:","category":"page"},{"location":"","page":"Home","title":"Home","text":"WARNING: Method definition schedule(Task) in module Base at task.jl:639 overwritten in module OpenTelemetrySDK at /home/tj/workspace/git/OpenTelemetry.jl/src/sdk/src/patch.jl:6.\n  ** incremental compilation may be fatally broken for this module **","category":"page"},{"location":"","page":"Home","title":"Home","text":"Unfortunately, this is unavoidable and shouldn't be a problem in most cases (unless you also overwritten the schedule(Task) method...). See more discussions in #32.","category":"page"},{"location":"#Packages","page":"Home","title":"Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Package Description Latest Version\nOpenTelemetryAPI Common data structures and interfaces. Instrumentations should rely on it only. (Image: version)\nOpenTelemetrySDK Based on the specification, application owners use SDK constructors; plugin authors use SDK plugin interfaces (Image: version)\nOpenTelemetryProto See the OTLP specification. Note the major and minor version is kept the same with the original opentelemetry-proto version. (Image: version)\nOpenTelemetryExporterOtlpProtoGrpc Provide an AbstractExporter in OTLP through gRPC. (WARNING!!! This package is not updated to the latest version yet since gRPCClient.jl doesn't support ProtoBuf.jl@v1 yet.) (Image: version)\nOpenTelemetryExporterOtlpProtoHttp Provide exporters in OTLP through HTTP. (Image: version)\nOpenTelemetryExporterPrometheus Provide a meter to allow pulling metrics from Prometheus (Image: version)\nOpenTelemetry Reexport all above. For demonstration and test only. Application users should import OpenTelemetrySDK in combination with necessary plugins or instrumentations explicitly. (Image: version)","category":"page"},{"location":"#Benchmarks","page":"Home","title":"Benchmarks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Check out the benchmark results of some essential operations with Julia@v1.6.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/#View-Metrics-in-Prometheus","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"","category":"section"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"Before learning how to view metrics in Prometheus, let's take a close look at the example code in the Get Started#Metrics section.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"using OpenTelemetry","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"OpenTelemetry.jl is a meta package of several sub-packages. In practice, we'd import proper sub-packages based on the need. Here we simply import this meta package for tutorial purpose.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"using Term","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"It is also recommended to import the Term.jl package for better rendering in REPL.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"global_meter_provider(MeterProvider());","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"The default global meter provider is a DummyMeterProvider(), which is just a placeholder and will do nothing. Try to remove this line and you won't see any metrics info printed in your console anymore.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"Here we set the global meter provider to MeterProvider(). More configurations about MeterProvider will be explained later.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"m = Meter(\"demo_metrics\");","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"Now, a Meter is defined with the name \"demo_metrics\". A Meter is used to group several instruments together to measure some similar aspects of a system. In an application, you may create many different meters as you wish.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"note: Note\nHere the meter is implicitly associated with the global_meter_provider. Users are recommended to use Meter(\"demo_metrics\"; provider=MeterProvider()) explicitly in practice.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"c = Counter{Int}(\"fruit_counter\", m)","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"Then let's create an instrument of type Counter to count the number of fruits. A Counter, as the name indicates, is used to count the number of something. Each instrument must be associated with a Meter (the m here). Note that the parameter type Int indicates that we'll use an Int to represent the value. Although we have many other Number types in Julia, Int and Float64 are the common ones supported by most Application Performance Monitoring (APM) systems.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"c(; name = \"apple\", color = \"red\")","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"Each counter is a functional object. Now, let's say we've seen a red apple. We can call it directly without positional arguments, which implicitly means we've seen exactly ONE fruit. The two extra keyword arguments, name and color, define two dimensions of our fruit counter c. In theory, we can define a dedicated counter named \"red_apple_counter\". But adding extra dimensions will help us perform some aggregations on the resulted metrics. We'll discuss the advantage in detail later.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"c(2; name = \"lemon\", color = \"yellow\")\nc(1; name = \"lemon\", color = \"yellow\")\nc(2; name = \"apple\", color = \"green\")\nc(5; name = \"apple\", color = \"red\")\nc(4; name = \"lemon\", color = \"yellow\")","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"After adding more fruits. Now a question naturally arises, \"How many fruits have we seen until now?\" To answer this question, we need to create a MetricReader.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"r = MetricReader();","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"Here we omit two positional arguments. By default, the MetricReader will read metrics associated with the global_meter_provider() and export them to console.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"As you may noticed, a bunch of information is printed in the console. What we're most interested in is the value field of each entry under the points field. Could you manually confirm they are exactly the same with the fruits we've seen?","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"Now let's add some more fruits.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"c(10; name = \"lychee\", color = \"red\")\nc(8; name = \"longan\", color = \"yellow\")\nc(3; name = \"apple\", color = \"red\")","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"To view all the fruits we've seen now, we can call the reader defined before, which is parameterless functional object.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"r()","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/#Export-Metrics-to-Prometheus","page":"View Metrics in Prometheus","title":"Export Metrics to Prometheus","text":"","category":"section"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"Although the information printed in the console is exhaustive, there're some better tools to help visualize the metrics intuitively. And this introduces the topic of the tutorial, to view metrics in Prometheus.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"Generally, there are two approaches to export metrics into Prometheus, the push or pull based approach. The push based approach means every time we call r(), the metrics are send to a remote Prometheus service. While the pull based approach means our MetricReader sets up a service and wait for Prometheus to fetch metrics.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"In OpenTelemetry.jl, only the pull-based approach is implemented for now.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"prometheus_reader = MetricReader(PrometheusExporter());","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"In the above code, we initialized a PrometheusExporter which listens to the endpoint of http://localhost:9496/metrics. Now open the link in your browser. You'll see metrics displayed as plain texts.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"That's it!","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"You can further configure the endpoint either explicitly with keyword arguments or implicitly through environment variables (TODO: insert a link to supported environment variables page).","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"For example, to allow external prometheus services to fetch metrics, we can set the host to 0.0.0.0.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"close(prometheus_reader)  # close it first, or you can choose another port to avoid conflict.\nprometheus_reader = MetricReader(PrometheusExporter(host=\"0.0.0.0\"));","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"The last step is to setup Prometheus and configure it to read the metrics we provided above. The official Prometheus website documents it well on how to install and configure the Prometheus client. Personally, I'd usually use docker for this kind of quick experiments. Make sure you have docker and docker-compose properly installed on your system. We'll use them throughout all the tutorials. Keep your existing Julia REPL open and we'll come back to it soon. Now open another terminal, follow the commands below to clone this repo and setup the Prometheus.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"git clone git@github.com:oolong-dev/OpenTelemetry.jl.git\ncd docs/src/tutorials/View_Metrics_in_Prometheus\ndocker compose up","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"Now open your browser and head to http://localhost:9090. You'll see the following Prometheus portal.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"(Image: )","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"Then click the icon near the Execute button to select the fruit_counter, and finally click the Execute button to execute the query. You'll see the metrics in the Table tab. Now switch to the Graph tab, you can see historical values of the fruit counter in each dimension. Come back to the Julia REPL. Try to add more fruits and see how the graph in the Prometheus portal changes.","category":"page"},{"location":"tutorials/View_Metrics_in_Prometheus/","page":"View Metrics in Prometheus","title":"View Metrics in Prometheus","text":"In the next tutorial, we'll learn more about OpenTelemetry and advanced metrics related usages.","category":"page"}]
}
